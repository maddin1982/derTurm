/**
 * Synchronisation von Verzeichnissen mit Git
 * Modul für node.js
 * 
 * gitsync ist ein einfacher Wrapper für Shell-Befehle. Git wird zum
 * effizienten Synchronisieren von Verzeichnissen eingesetzt. Das zu
 * übertragende Verzeichnis wird per push an ein Remote-Repository
 * gesendet und am Zielort per pull abgerufen. Die Deltakodierung und
 * Komprimierung von Git ermöglichen Aktualisierungen über das Netzwerk
 * bei minimalem Bandbreitebedarf.
 * 
 * Die Funktionen .push() und .pull() setzen eingerichtete Repositories
 * (lokal und remote) voraus, Ausnahmen siehe unten. Harte Befehle
 * umgehen die gängigen Überprüfungen von Git, um auch in unüblichen
 * Situationen eine Synchronisation zu erzwingen.
 * 
 * Die Git-Anweisungen werden in einer Shell in einem Kindprozess aus-
 * geführt. Git muss in der Shell als "git" aufrufbar sein. Die Shell
 * wird von dem eingebauten Modul "child_process" geladen.
 * 
 * ACHTUNG: gitsync.pull() überschreibt Dateien ohne zu fragen!
 * 
 * Das Modul ist passiv und wartet, bis eine Funktion aufgerufen wird.
 * Es wird nichts ausgegeben, außer im Debug-Modus mit console.log().
 * Es sind keine Exceptions zu erwarten.
 * 
 * gitsync
 *   .directory: zu synchronisierendes Verzeichnis
 *   .remote: Remote-Repository (Name oder URL) (Vorgabe: "origin")
 *   .branch: zu benutzender Branch im Remote-Repo (Vorgabe: "master")
 *   .debug: auf true setzen, um Debug-Modus einzuschalten
 * 
 * gitsync.push(options, callback)
 *   überträgt lokales Verzeichnis an Remote-Repository
 *   options.init: Verzeichnis vor commit und push initialisieren
 *   options.message: Commit-Nachricht (optional)
 *   options.author: Commit-Autor in der Form "Name <email>" (optional)
 *   callback: function(error)
 * 
 * gitsync.pull(options, callback)
 *   holt Dateien aus Remote-Repository in lokales Verzeichnis
 *   options.init: Verzeichnis vor pull und reset initialisieren
 *   callback: function(error)
 * 
 * error
 *   Fehlerstatus, wie er von child_process.exec() zurückgegeben wird
 *   (ist null bei Erfolg)
 * 
 * Wenn .remote explizit (zum Beispiel als URL) angegeben wird, muss für
 * die Repos der lokalen Verzeichnisse, in denen .push() und .pull()
 * arbeiten, kein Remote-Repo eingerichtet werden. Wenn .push() und
 * .pull() zudem mit der init-Option aufgerufen werden, wird in den
 * Verzeichnissen beim Aufruf ein neues Repo initialisiert – damit ist
 * keinerlei Einrichtung notwendig.
 * 
 * nick@bitfasching.de
 * v0.1.0, 01/2015
 */


(function(){
    
    /* :: Basis :: */
    
    // Selbstreferenz
    var gitsync;
    
    // Abhängigkeiten
    var child = require('child_process');
    
    
    /* :: Modulschnittstelle :: */
    
    module.exports = gitsync = {
        
        // Arbeitsverzeichnis für Git (Pfad zum Repo)
        directory: './',
        
        // Remote-Repository (Name oder URL)
        remote: 'origin',
        
        // Name des zu benutzenden Branches im Remote-Repository
        branch: 'master',
        
        // Ausgaben auf Konsole für Fehlersuche
        debug: false,
        
    };
    
    
    /* :: öffentliche Funktionen :: */
    
    // Verzeichnis an Remote-Repository übertragen
    gitsync.push = function( options, callback )
    {
        // Parameter für Commit setzen
        options = options || {};
        options.message = options.message || 'automatic';
        options.author  = options.author  || 'gitsync <gitsync@localhost>';
        
        // Befehlszeile, um aktuellen Stand zu committen und ohne Rücksicht auf Verluste zu pushen
        var command = 'git add --all -- . && '
                    + 'git commit --all --allow-empty --message="'+options.message+'" --author="'+options.author+'" && '
                    + 'git push --force --thin ' + this.remote.trim()+' HEAD:'+this.branch.trim();
        
        // optional vorher noch das Verzeichnis als Repo initialisieren
        if ( options.init )
        {
            // Initialisierung den anderen Befehlen voranstellen
            command = 'git init && ' + command;
        }
        
        // Befehlszeile als Kindprozess ausführen (und callback direkt mitgeben)
        execute( command, this.directory, this.debug, callback );
    };
    
    // Verzeichnis mit neuestem Stand aus Remote-Repository überschreiben
    gitsync.pull = function( options, callback )
    {
        // Befehlszeile, um aktuellen Stand zu holen und einen Checkout zu erzwingen
        var command = 'git pull --force ' + this.remote.trim()+' '+this.branch.trim()+' && '
                    + 'git reset --hard';
        
        // optional vorher noch das Verzeichnis als Repo initialisieren
        if ( options && options.init )
        {
            // Initialisierung den anderen Befehlen voranstellen
            command = 'git init && ' + command;
        }
        
        // Befehlszeile als Kindprozess ausführen (und callback direkt mitgeben)
        execute( command, this.directory, this.debug, callback );
    };
    
    
    /* :: interne Helfer :: */
    
    // Befehlszeile ausführen, im Fehlerfall loggen und callback feuern
    function execute( command, cwd, log, callback )
    {
        // auszuführenden Befehl mitschreiben
        log && console.log( "[gitsync] [i] execute:", command );
        
        // Befehlszeile ausführen
        child.exec( command, { cwd: cwd }, function( error, stdout )
        {
            // Ausgabe protokollfreundlich machen
            stdout = condenseString( stdout );
            
            // Ergebnis festhalten
            log &&  error && console.log( "[gitsync] [!] error:", condenseString( error.toString() ), "stdout:", stdout );
            log && !error && console.log( "[gitsync] [i] success. stdout:", stdout );
            
            // fertig, Fehlerstatus zurückgeben
            callback( error );
        });
    }
    
    // mehrzeilige Strings in eine protokollfreundliche Zeile umwandeln
    function condenseString( string )
    {
        // trimmen, Zeilenumbrüche durch ' | ' ersetzen, Whitespaces zusammenfassen
        return string.trim().replace( /\s*\n\s*/, ' | ' ).replace( /\s+/, ' ' );
    }
    
})();
